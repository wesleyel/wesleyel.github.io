<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>嵌入式 on Country Road</title><link>https://wesleyel.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/</link><description>Recent content in 嵌入式 on Country Road</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>Wesley Yang</copyright><lastBuildDate>Wed, 04 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://wesleyel.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/index.xml" rel="self" type="application/rss+xml"/><item><title>Buildroot 速查</title><link>https://wesleyel.github.io/p/buildroot-cheatsheet/</link><pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate><guid>https://wesleyel.github.io/p/buildroot-cheatsheet/</guid><description>&lt;blockquote>
&lt;p>完整文档可以在&lt;a class="link" href="https://buildroot.org/downloads/manual/manual.html" target="_blank" rel="noopener"
>官方网站&lt;/a>找到。&lt;/p>
&lt;/blockquote>
&lt;h2 id="快速开始一个-buildroot-项目">快速开始一个 buildroot 项目
&lt;/h2>&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">&lt;span class="nv">buildroot_repo&lt;/span>&lt;span class="o">=&lt;/span>https://github.com/buildroot/buildroot.git
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">buildroot_version&lt;/span>&lt;span class="o">=&lt;/span>2022.11
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">buildroot_src&lt;/span>&lt;span class="o">=&lt;/span>buildroot-&lt;span class="nv">$buildroot_version&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">buildroot_defcfg&lt;/span>&lt;span class="o">=&lt;/span>raspberrypi4_defconfig
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git clone --branch &lt;span class="nv">$buildroot_version&lt;/span> --depth &lt;span class="m">1&lt;/span> &lt;span class="nv">$buildroot_repo&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make -C &lt;span class="nv">$buildroot_src&lt;/span> defconfig &lt;span class="nv">BR2_DEFCONFIG&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$buildroot_defcfg&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">make -C &lt;span class="nv">$buildroot_src&lt;/span> linux-reconfigure all
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="基本命令">基本命令
&lt;/h2>&lt;p>&lt;a class="link" href="https://buildroot.org/downloads/manual/manual.html#make-tips" target="_blank" rel="noopener"
>Make 提示&lt;/a>&lt;/p>
&lt;p>使用 &lt;code>make help&lt;/code> 获取所有可用目标的列表。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>make&lt;/td>
&lt;td>构建 rootfs&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>make xyz_defconfig&lt;/td>
&lt;td>选择配置文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>make menuconfig&lt;/td>
&lt;td>打开配置菜单&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>make savedefconfig&lt;/td>
&lt;td>将当前配置保存到 defconfig 文件中&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>make source&lt;/td>
&lt;td>下载包的源代码&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>make clean&lt;/td>
&lt;td>清理所有构建产品（包括构建目录、主机、暂存和目标树、镜像和工具链）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>make distclean&lt;/td>
&lt;td>清理所有内容，包括配置&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="包管理">包管理
&lt;/h3>&lt;blockquote>
&lt;p>&lt;a class="link" href="https://buildroot.org/downloads/manual/manual.html#pkg-build-steps" target="_blank" rel="noopener"
>特定包的 make 目标&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>make &amp;lt;pkg&amp;gt;&lt;/td>
&lt;td>构建一个包&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>make &amp;lt;pkg&amp;gt;-reinstall&lt;/td>
&lt;td>重新安装一个包&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>make &amp;lt;pkg&amp;gt;-rebuild&lt;/td>
&lt;td>重新构建一个包（这意味着重新安装）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>make &amp;lt;pkg&amp;gt;-reconfigure&lt;/td>
&lt;td>重新配置一个包（这意味着重新构建）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>make &amp;lt;pkg&amp;gt;-dirclean&lt;/td>
&lt;td>清理包目录&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3 id="调试">调试
&lt;/h3>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>make graph-depends&lt;/td>
&lt;td>生成依赖关系图&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>make &amp;lt;pkg&amp;gt;-graph-depends&lt;/td>
&lt;td>生成包的依赖关系图&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="目录结构">目录结构
&lt;/h2>&lt;table>
&lt;thead>
&lt;tr>
&lt;th>目录&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>configs&lt;/td>
&lt;td>单板的配置和 defconfig 文件的位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>package&lt;/td>
&lt;td>包定义的位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>dl&lt;/td>
&lt;td>下载的源代码压缩包&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>output/build&lt;/td>
&lt;td>所有组件构建的目录&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>output/images&lt;/td>
&lt;td>构建的内核、引导加载程序和根文件系统镜像的位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>output/staging&lt;/td>
&lt;td>交叉编译工具链和用户空间包的头文件和库的位置（这是 host/&lt;toolchains>/sysroot 的软链）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>output/host&lt;/td>
&lt;td>包括交叉编译工具链在内的主机工具的位置&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>output/target&lt;/td>
&lt;td>几乎是最终的目标根文件系统&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="mk-文件">&lt;code>.mk&lt;/code> 文件
&lt;/h2>&lt;h3 id="cmake">Cmake
&lt;/h3>&lt;blockquote>
&lt;p>&lt;a class="link" href="https://buildroot.org/downloads/manual/manual.html#cmake-package-tutorial" target="_blank" rel="noopener"
>cmake 包教程&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>一个 cmake 包的示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-makefile" data-lang="makefile">&lt;span class="line">&lt;span class="cl">&lt;span class="c">################################################################################
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">#
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"># libfoo
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">#
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">################################################################################
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">LIBFOO_VERSION&lt;/span> &lt;span class="o">=&lt;/span> 1.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">LIBFOO_SOURCE&lt;/span> &lt;span class="o">=&lt;/span> libfoo-&lt;span class="k">$(&lt;/span>LIBFOO_VERSION&lt;span class="k">)&lt;/span>.tar.gz
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">LIBFOO_SITE&lt;/span> &lt;span class="o">=&lt;/span> http://www.foosoftware.org/download
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">LIBFOO_INSTALL_STAGING&lt;/span> &lt;span class="o">=&lt;/span> YES
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">LIBFOO_INSTALL_TARGET&lt;/span> &lt;span class="o">=&lt;/span> NO
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">LIBFOO_CONF_OPTS&lt;/span> &lt;span class="o">=&lt;/span> -DBUILD_DEMOS&lt;span class="o">=&lt;/span>ON
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">LIBFOO_DEPENDENCIES&lt;/span> &lt;span class="o">=&lt;/span> libglib2 host-pkgconf
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">$(&lt;/span>&lt;span class="nv">eval&lt;/span> &lt;span class="k">$(&lt;/span>&lt;span class="nv">cmake&lt;/span>-&lt;span class="nv">package&lt;/span>&lt;span class="k">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="外部包和-sysvinit">外部包和 sysvinit
&lt;/h3>&lt;p>一个带有 sysvinit 的外部包示例：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-makefile" data-lang="makefile">&lt;span class="line">&lt;span class="cl">&lt;span class="c">################################################################################
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">#
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c"># gsmmux 项目
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">#
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">################################################################################
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">GSMMUX_SITE&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="k">$(&lt;/span>TOPDIR&lt;span class="k">)&lt;/span>/../external/path/gsmmux
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">GSMMUX_SITE_METHOD&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">local&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">GSMMUX_INSTALL_STAGING&lt;/span> &lt;span class="o">=&lt;/span> YES
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="nv">GSMMUX_VERSION&lt;/span> &lt;span class="o">=&lt;/span> 1.0
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">define&lt;/span> &lt;span class="err">GSMMUX_INSTALL_INIT_SYSV&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">$(&lt;/span>&lt;span class="nv">INSTALL&lt;/span>&lt;span class="k">)&lt;/span> &lt;span class="err">-D&lt;/span> &lt;span class="err">-m&lt;/span> &lt;span class="err">755&lt;/span> &lt;span class="k">$(&lt;/span>@&lt;span class="nv">D&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="err">/S50start_cmuxd&lt;/span> &lt;span class="err">\&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">$(&lt;/span>&lt;span class="nv">TARGET_DIR&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="err">/etc/init.d/S50start_cmuxd&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="err">endef&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">$(&lt;/span>&lt;span class="nv">eval&lt;/span> &lt;span class="k">$(&lt;/span>&lt;span class="nv">cmake&lt;/span>-&lt;span class="nv">package&lt;/span>&lt;span class="k">))&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="如何设置-ccache编译缓存">如何设置 ccache（编译缓存）？
&lt;/h3>&lt;p>&lt;a class="link" href="https://buildroot.org/downloads/manual/manual.html#ccache" target="_blank" rel="noopener"
>在 Buildroot 中使用 ccache&lt;/a>&lt;/p>
&lt;p>&lt;code>ccache&lt;/code> 支持已集成在 Buildroot 中。只需在 &lt;code>Build options&lt;/code> 中启用 &lt;code>Enable compiler cache&lt;/code>。这将自动构建 &lt;code>ccache&lt;/code> 并将其用于每个主机和目标编译。&lt;/p>
&lt;p>&lt;code>cache&lt;/code> 位于 &lt;code>BR2_CCACHE_DIR&lt;/code> 配置选项定义的目录中，默认值为 &lt;code>$HOME/.buildroot-ccache&lt;/code>。此默认位置在 Buildroot 输出目录之外，因此可以由单独的 Buildroot 构建共享。如果要删除缓存，只需删除此目录。&lt;/p>
&lt;h3 id="如何重新生成-targetrootfs">如何重新生成 target/rootfs
&lt;/h3>&lt;p>&lt;a class="link" href="https://stackoverflow.com/questions/47320800/how-to-clean-only-target-in-buildroot" target="_blank" rel="noopener"
>How to clean only target in buildroot&lt;/a>&lt;/p>
&lt;p>由于&lt;code>rm -rf output/target &amp;amp;&amp;amp; make&lt;/code>并不会触发 install 操作，所以需要用以下 hack 来实现：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">rm -rf output/target
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 删除所有的 .stamp_target_installed 文件&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">find ../ -name &lt;span class="s2">&amp;#34;.stamp_target_installed&amp;#34;&lt;/span> -delete
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">rm -f output/build/host-gcc-final-*/.stamp_host_installed
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Yocto &amp; Bitbake 速查</title><link>https://wesleyel.github.io/p/yocto-cheetsheet/</link><pubDate>Wed, 04 Sep 2024 00:00:00 +0000</pubDate><guid>https://wesleyel.github.io/p/yocto-cheetsheet/</guid><description>&lt;blockquote>
&lt;p>完整文档可以在&lt;a class="link" href="https://docs.yoctoproject.org/" target="_blank" rel="noopener"
>Yocto 文档网站&lt;/a>找到。
参考自&lt;a class="link" href="https://github.com/shantanoo-desai/yoctoproject-cheatsheet" target="_blank" rel="noopener"
>yoctoproject-cheatsheet&lt;/a>。&lt;/p>
&lt;/blockquote>
&lt;h2 id="cli-命令">Cli 命令
&lt;/h2>&lt;p>需要先通过&lt;code>source setup-environment&lt;/code>设置Bitbake环境&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>命令&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>bitbake &lt;image>&lt;/td>
&lt;td>编译指定的 image&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bitbake -c &lt;task> &lt;recipe>&lt;/td>
&lt;td>执行指定的 task。 可选的 task 有: &lt;code>fetch&lt;/code>, &lt;code>unpack&lt;/code>, &lt;code>patch&lt;/code>, &lt;code>configure&lt;/code>, &lt;code>compile&lt;/code>, &lt;code>install&lt;/code>, &lt;code>package&lt;/code>, &lt;code>clean&lt;/code>, &lt;code>cleansstate&lt;/code>, &lt;code>rebuild&lt;/code>, &lt;code>reconfigure&lt;/code>, &lt;code>reinstall&lt;/code>等。&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bitbake -c cleanall &lt;recipe>&lt;/td>
&lt;td>清理指定的 recipe. 包括工作目录和 sstate cache&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bitbake -c devshell &lt;recipe>&lt;/td>
&lt;td>进入指定 recipe 的 shell 环境&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bitbake -c listtasks &lt;recipe>&lt;/td>
&lt;td>列出指定 recipe 的所有 task&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bitbake -c showappends &lt;recipe>&lt;/td>
&lt;td>显示指定 recipe 的所有 append 文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bitbake -e &lt;recipe>&lt;/td>
&lt;td>显示指定 recipe 的所有变量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bitbake -s&lt;/td>
&lt;td>列出所有可用的 recipe&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bitbake -S &lt;recipe>&lt;/td>
&lt;td>显示指定 recipe 的依赖关系&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bitbake &lt;image> &amp;ndash;graphviz &amp;ndash;ui=depexp&lt;/td>
&lt;td>生成&lt;image>的包依赖关系图&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bitbake-layers show-layers&lt;/td>
&lt;td>显示所有的 layer&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bitbake-layers show-appends&lt;/td>
&lt;td>显示所有的 append 文件&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bitbake-layers show-recipes&lt;/td>
&lt;td>显示所有的 recipe&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bitbake-layers show-recipes &amp;ldquo;gdb*&amp;rdquo;&lt;/td>
&lt;td>搜索 recipe&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>bitbake-layers show-depends&lt;/td>
&lt;td>显示所有的依赖关系&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="变量语法和操作">变量语法和操作
&lt;/h2>&lt;blockquote>
&lt;p>参考自&lt;a class="link" href="https://docs.yoctoproject.org/bitbake/2.4/bitbake-user-manual/bitbake-user-manual-metadata.html" target="_blank" rel="noopener"
>Bitbake User Manual&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>可以随时使用 &lt;code>bitbake -e&lt;/code> 查看编译时的变量。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>语法&lt;/th>
&lt;th>描述&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>VARIABLE = &amp;quot;value&amp;quot;&lt;/code>&lt;/td>
&lt;td>设置变量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>VARIABLE = &amp;quot; value &amp;quot;&lt;/code>&lt;/td>
&lt;td>如果变量值中有空格，那么空格会被&lt;strong>保留&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>VARIABLE = &amp;quot;&amp;quot;&lt;/code>&lt;/td>
&lt;td>设置变量为空&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>VARIABLE = &amp;quot; &amp;quot;&lt;/code>&lt;/td>
&lt;td>设置变量为一个空格&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>VARIABLE = '&amp;quot;'&lt;/code>&lt;/td>
&lt;td>通过单引号设置含有双引号的变量&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>VARIABLE = &amp;quot;${OTHER_VARIABLE}&amp;quot;&lt;/code>&lt;/td>
&lt;td>引用其他变量, 变量在&lt;strong>真正使用时&lt;/strong>才会被展开&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>VARIABLE := &amp;quot;${OTHER_VARIABLE}&amp;quot;&lt;/code>&lt;/td>
&lt;td>设置变量，&lt;strong>立即展开&lt;/strong>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>VARIABLE ?= &amp;quot;value&amp;quot;&lt;/code>&lt;/td>
&lt;td>设置默认值，如果变量已经设置，那么不会覆盖&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>VARIABLE ??= &amp;quot;value&amp;quot;&lt;/code>&lt;/td>
&lt;td>设置&lt;em>弱&lt;/em>默认值，见&lt;a class="link" href="https://docs.yoctoproject.org/bitbake/2.4/bitbake-user-manual/bitbake-user-manual-metadata.html#setting-a-weak-default-value" target="_blank" rel="noopener"
>弱默认值&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>VARIABLE += &amp;quot;value&amp;quot;&lt;/code>&lt;/td>
&lt;td>追加变量值（带空格）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>VARIABLE =+ &amp;quot;value&amp;quot;&lt;/code>&lt;/td>
&lt;td>在变量值前面追加（带空格）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>VARIABLE .= &amp;quot;value&amp;quot;&lt;/code>&lt;/td>
&lt;td>追加变量值（无空格）&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>VARIABLE =. &amp;quot;value&amp;quot;&lt;/code>&lt;/td>
&lt;td>在变量值后面追加（无空格）&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;blockquote>
&lt;p>TODO&lt;/p>
&lt;/blockquote>
&lt;h2 id="localconf-配置">&lt;code>local.conf&lt;/code> 配置
&lt;/h2>&lt;p>这些配置可以加入到 &lt;code>local.conf&lt;/code> 或者&lt;code>bblayers.conf&lt;/code>文件中，也根据需求加入其他 Machine 配置中。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>配置&lt;/th>
&lt;th>作用&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>&lt;code>RM_WORK_EXCLUDE += &amp;quot;recipe_name&amp;quot;&lt;/code>&lt;/td>
&lt;td>编译后&lt;strong>不删除&lt;/strong>指定的 recipe 的工作目录，用于调试&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>&lt;code>INHERIT += &amp;quot;rm_work&amp;quot;&lt;/code>&lt;/td>
&lt;td>编译后&lt;strong>删除&lt;/strong>工作目录&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h2 id="faq">FAQ
&lt;/h2>&lt;h3 id="note-reconnecting-to-bitbake-server">NOTE: Reconnecting to bitbake server
&lt;/h3>&lt;p>删除 bitbake.lock&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">rm -rf &amp;lt;build-dir&amp;gt;/bitbake.lock
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="error-nothing-provides-a-needed-by-b">ERROR: nothing provides A needed by B
&lt;/h3>&lt;ul>
&lt;li>情况一： recipe A 不存在，没有被添加到 packagegroup 或者 dependcy 中&lt;/li>
&lt;li>情况二： recipe A 编出来是空包，没有生成任何文件。需要在 A 的 recipe 中添加 &lt;code>ALLOW_EMPTY_${PN} = &amp;quot;1&amp;quot;&lt;/code> 来解决&lt;/li>
&lt;/ul>
&lt;p>经常在编译动态库时会遇到这个问题，因为动态库的 recipe 生成的是一个空包。&lt;/p>
&lt;p>&lt;a class="link" href="https://stackoverflow.com/questions/59091938/yocto-oe-recipe-with-cmake-install-a-shared-library-so" target="_blank" rel="noopener"
>Yocto / OE : recipe with CMake install a shared library .so - Stack Overflow&lt;/a>
&lt;a class="link" href="https://docs.yoctoproject.org/pipermail/yocto/2015-January/022921.html" target="_blank" rel="noopener"
>do_rootfs missing package (ipk) or not found in base feeds (rpm) (yoctoproject.org)&lt;/a>&lt;/p>
&lt;p>只有 &lt;code>*.so.*&lt;/code>（包含版本号的动态库）会被打包进 FILES_${PN}，而软链接 &lt;code>*.so&lt;/code> 会被打包进 &lt;code>-dev&lt;/code>package&lt;/p>
&lt;h3 id="如何使用-devtool-新增patch">如何使用 &lt;code>devtool&lt;/code> 新增patch
&lt;/h3>&lt;p>&lt;a class="link" href="https://stackoverflow.com/questions/33939837/what-is-best-practice-to-do-small-changes-in-source-code-in-yocto" target="_blank" rel="noopener"
>bitbake - What is best practice to do small changes in source code in Yocto - Stack Overflow&lt;/a>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">devtool modify -x &amp;lt;recipe&amp;gt; &amp;lt;path-to-unpack&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">devtool build &amp;lt;recipe&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1"># 修改位于&amp;lt;path-to-unpack&amp;gt;的源码&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git add
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">git commit
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">devtool update-recipe &amp;lt;recipe&amp;gt;
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">devtool reset &amp;lt;recipe&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item><item><title>Linux Process 的内存布局</title><link>https://wesleyel.github.io/p/linux-process-memory-layout/</link><pubDate>Tue, 25 Jul 2023 00:00:00 +0000</pubDate><guid>https://wesleyel.github.io/p/linux-process-memory-layout/</guid><description>&lt;h2 id="内存布局">内存布局
&lt;/h2>&lt;p>一般而言，C程序通常由一下几个部分组成。&lt;/p>
&lt;ul>
&lt;li>
&lt;p>正文段&lt;/p>
&lt;ul>
&lt;li>正文段是用于存储代码的，也称之为代码段。如果函数是可重入的，那么代码段是可以共享的。正文段通常都是只读的，以防止被更改。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>初始化数据段&lt;/p>
&lt;ul>
&lt;li>初始化数据段包含了程序中需要明确初始化的变量。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>未初始化数据段&lt;/p>
&lt;ul>
&lt;li>未初始化数据段也被称为bss段。这里的存放的数据是交由内核来完成初始化为0的操作。例如：函数外定义的数组，它会在程序执行之前被内核全部初始化为0。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>栈区&lt;/p>
&lt;ul>
&lt;li>自动变量以及每次函数调用时需要保存的信息都被保存在这个区域。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>堆区&lt;/p>
&lt;ul>
&lt;li>通常在堆区进行动态内存分配。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>对于Intel x86处理器上的Linux操作系统而言，典型的存储空间布局如下：&lt;/p>
&lt;p>&lt;img src="https://wesleyel.github.io/img/process_memory_layout.png"
loading="lazy"
alt="内存布局"
>&lt;/p>
&lt;h2 id="命令行参数和环境变量">命令行参数和环境变量
&lt;/h2>&lt;p>命令行参数是指从命令行执行程序的时候，给程序的参数。C语言总是从main函数执行的，它的命令行参数被ISO C和POSIX规定为如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[]);&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>main函数的第一个参数argc保存的是程序执行的时候，命令行输入的参数总个数。其中第0个参数就是被执行的程序名字。第二个参数argv是用来保存命令行参数的。ISO C和POSIX都要求argv[argc]是一个空指针。&lt;/p>
&lt;p>一个简单的实例如下：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;程序执行名：%s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;参数列表：&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行结果如下：
&lt;img src="https://wesleyel.github.io/img/argc_argv_example.jpg"
loading="lazy"
alt="example"
>&lt;/p>
&lt;p>现在，POSIX规定了不使用第三个参数，通常使用getenv函数和putenv函数来访问环境变量。&lt;/p>
&lt;p>每次程序都有一张环境表，当我们需要查看整个环境的时候，可以使用全局变量environ。它包含了该指针数字的地址。&lt;/p>
&lt;p>&lt;code>extern char **environ;&lt;/code>&lt;/p>
&lt;p>我们来写个程序打印一下全部的环境变量。&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="line">&lt;span class="cl">&lt;span class="cp">#include&lt;/span>&lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="cp">&lt;/span>&lt;span class="k">extern&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="nb">NULL&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">environ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="nf">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%s&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span>&lt;span class="n">environ&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>执行以后的结果如下：
&lt;img src="https://wesleyel.github.io/img/environ_example.jpg"
loading="lazy"
alt="example"
>&lt;/p>
&lt;p>依照惯例，环境变量应该是&lt;code>name=value&lt;/code>这样的字符串构成。ISO C给我们提供了一些和环境变量有关的函数。可以通过以下方法查询：&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre tabindex="0" class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="line">&lt;span class="cl">man getenv
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">man setenv
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></description></item></channel></rss>